var embeddedBody1 = "Techincally, this was five projects, all working with this car for various things, but a few of them weren't particularly interesting. Also, I didn't think to take pictures. This is a TI-RSLK robot car with an attached microcontroller that has a ridiculously long name. We worked with its input and output pins, onboard timer, analog-to-digital converter, and inter-integrated circuit.";
var embeddedBody2 = "For this project, we used potentiometers to control the car's speed and direction. We spent most of our time implementing PID control to keep the car on a straight path. The wheels had encoders that triggered every 1/60th of a rotation, which allowed us to measure the individual wheel speeds and calculate the error from a desired speed. It took a lot of tuning to get the car to drive straight on account of it only having two wheels. If one wheel was off from the other, the car would swerve off course.";
var embeddedBody3 = "We programmed the microcontroller in C, using a combination of the microcontroller's registers and the TI DriverLib Library. The registers were good enough for GPIO, but for more complicated functions like the timers and the timers and the I2C, the library was easier to work with.";
var embeddedBody4 = "For this project, we used two digital compasses to control the car via a remote (the remote is still a breadboard with some wires). One compass was attached to the car, and the other to the remote. We measured the headings of both compasses and used the difference to turn the car or drive as directed. The remote supported rotation to the left and right, and driving forward and backwards.";
var embeddedBody5 = "It also involved multiple smaller tasks, like wiring the microcontroller outputs to an H bridge to control the direction and speed of the motors. The compass was very finicky, and if reading the data took too long or errored, the compass would lock and stop sending data until the microcontroller was restarted. It took a while, but it worked in the end.";
export { embeddedBody1, embeddedBody2, embeddedBody3, embeddedBody4, embeddedBody5 }